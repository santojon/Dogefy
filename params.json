{"name":"Dogefy","tagline":" Dogefy is a manner to make your DOM bark!","body":"| <h1>Dogefy</h1> **v0.1 (beta)** |\r\n:-----------------:\r\n| A JS lib to make your DOM bark! |\r\n| <img src=\"screenshot.jpg\" title=\"Dogefy screenshot\"/> |\r\n\r\n\r\n## Library proposal\r\nDogefy assists to make any DOM element barks like the doge, putting doge phrases in screen.  \r\nYou can make it barks! wow! such dogefy!  \r\nYou can make it barks a lot too! amaze!\r\n\r\n\r\n## Related dependencies and concerns\r\n    - No dependecies. Writen in pure javascript.\r\n    - Full jQuery and other frameworks compatible.\r\n    - For usage examples, see the samples folder and pick one ( for now is a single one ;) ).\r\n\r\n\r\n## Licensing\r\n    - Apache License 2.0 (Included). See 'LICENSE' file.\r\n\r\n\r\n## Usage\r\nYou can make any DOM node a doge that barks.  \r\nTo use it in your code, just add:\r\n\r\n> ```html\r\n>   <script type=\"text/javascript\"\r\n>      src=\"https://raw.githubusercontent.com/santojon/Dogefy/master/dist/dogefy.min.js\">\r\n>   </script>\r\n> ```\r\n\r\nTo dogefy an element, you have two ways:\r\n\r\n> ```javascript\r\n> var doge = new Dogefy(document.getElementById('your_doge'));\r\n> ```\r\n\r\nor jQuery way:\r\n\r\n> ```javascript\r\n> var doge = new Dogefy($('#your_doge'));\r\n> ```\r\n\r\nNow you have a doge in your 'doge' var.  \r\nThis was created with the selected node.  \r\nTo make it work properly, you have to initialize it with **init()** function:\r\n\r\n> ```javascript\r\n> doge.init();\r\n> ```\r\n\r\nAn initialized doge can bark!\r\n\r\n> ```javascript\r\n> doge.bark();\r\n> ```\r\n\r\nThis will generate a doge phrase with a randon color in dogefy existent colors.  \r\nThat will be like:\r\n\r\n<img src=\"bark.jpg\" title=\"Dogefy doge phrase\"/>\r\n\r\nAlternatly, you can make **a DOM Node** a doge with:\r\n\r\n> ```javascript\r\n> var doge = document.getElementById('your_doge').dogefy();\r\n> ```\r\n\r\nor:\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy();\r\n> ```\r\n\r\nThis will create **an initialized doge** with the selected element.\r\n**Do not use init() on that! Alternate method even returns an initialized doge!**\r\n\r\n\r\n## Options\r\nYou can set some options to personalize your doge.\r\n\r\n#### 1. fullWords\r\nThe words the doge will say itself, like 'wow', or 'amaze'.  \r\nYou set this with **an array of strings**.  \r\n\\***Set this option will override default words.**\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tfullWords: ['wow', 'uhoh!', 'great']\r\n> });\r\n> ```\r\n\r\n#### 2. firstWords\r\nThe words the doge will use to say starting a phrase, like 'so', or 'many'.  \r\nYou set this with **an array of strings**.   \r\n\\***Set this option will override default words.**\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tfirstWords: ['very', 'not']\r\n> });\r\n> ```\r\n\r\n#### 3. lastWords\r\nThe words the doge will use to say ending a phrase.  \r\nThis can be any common name.  \r\nYou set this with **an array of strings**.  \r\n\\***Set this option will override default words.**\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tlastWords: ['doge', 'computing', 'player', 'car']\r\n> });\r\n> ```\r\n\r\n#### 4. colors\r\nThe colors of the doge phrases to show.  \r\nOne of then will be chosen randomly each time it barks.  \r\nIs setted with a list of possible values.  \r\nThat can be **the name of the color** (HTML color name), or **the HEX value itself** (HTML style).  \r\n\\***Set this option will override default colors.**\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tcolors: ['red', 'green', 'blue', '#000', '#ffcc66']\r\n> });\r\n> ```\r\n\r\n#### 5. barkInterval\r\nIs used to delay barks when doge barks a lot (\\*vide **manyBark()**).  \r\nThis is the time **in millis** to delay many barks.  \r\nThe default value is **0** (no interval).  \r\n\\***You can only set up the doge to barks a lot if you set this value to at least 1.**\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tbarkInterval: 500\r\n> });\r\n> ```\r\n\r\n#### 6. barkDelay\r\nIs used to delay single barks.  \r\nThis is the time **in millis** to delay barks.  \r\nThe default value is **0** (no delay).\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tbarkDelay: 50\r\n> });\r\n> ```\r\n\r\n#### 7. barkDuration\r\nThe duration of the bark.  \r\nThis is the time **in millis** to hide barks.  \r\nAfter this amount of time, the bark will hide.  \r\nThe default value is **10000** (10 seconds).  \r\nYou can change this time or make they do not hide.  \r\nTo prevent the barks to hides itself, set this to **-1**, like:\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tbarkDelay: -1\r\n> });\r\n> ```\r\n\r\n#### 8. barkOn, manyBarkOn and clearOn\r\nThe postfix **'on'** in these options mean a link with javascript events.  \r\nYou can set this like:\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tbarkOn: 'click'\r\n> });\r\n> ```\r\n\r\nor with a list of events:\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tclearOn: ['mouseout', 'mouseover']\r\n> });\r\n> ```\r\n\r\nThese means the chosen event(s) will be bounded with the dogefied element.  \r\nThe main difference between then is **the action after the event fires** (clear, bark or manyBark).\r\n\r\n#### 9. barkFrom, manyBarkFrom and clearFrom\r\nThe postfix **'from'** in these options mean a link to another element.  \r\nYou can set this like:\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tclearFrom: document.getElementById('btn')\r\n> });\r\n> ```\r\n\r\nThese means the chosen element will be bounded with the selected doge event (clear, bark or manyBark) **by click**.  \r\nWhen you click in the element you pass in option, your doge will react with the action you choose.  \r\nYou can pass **only one** element on these options.\r\n\r\n#### 10. barkWhen, manyBarkWhen and clearWhen\r\nThe postfix **'when'** in these options mean you can pass a function as value.  \r\nYou can set this like:\r\n\r\n> ```javascript\r\n>  var doge = $('#your_doge').dogefy({\r\n> \t\tmanyBarkWhen: function(callBack) {\r\n> \t\t\t$('#btn').addEventListener('click', function(e) {\r\n> \t\t\t\tcallBack();\r\n> \t\t\t}\r\n> \t\t});\r\n>  }\r\n> });\r\n> ```\r\n\r\nYou can pass the function you want. The only concern is that function have to receive (and use) a callback.  \r\n**The callback must be the only parameter of the function!**\r\nThe callback will be the selected doge event (clear, bark or manyBark).  \r\nWith this you can set straight conditions for each doge event.\r\n\r\n\r\n## Methods\r\n\r\n#### 1. init()\r\nThe first method to be called when creating a doge (\\*unless you use the **alternate way**).  \r\nThis sets up a doge, to be totally usefull.  \r\nReturns a your doge, fully usefull.  \r\n**Do not use this on an initialized doge!**  \r\nUsage:\r\n\r\n> ```javascript\r\n> doge.init();\r\n> ```\r\n\r\nThis method return the doge, initialized.  \r\nAll other methods works **on initialized doges**.\r\n\r\n#### 2. bark()\r\nIs the voice of the doge.  \r\nRender a doge phrase into the dogefied element, randomly positioned.\r\n\r\n> ```javascript\r\n> doge.bark();\r\n> ```\r\n\r\n#### 3. manyBark()\r\nIs what doge do when exited or in rage.  \r\nRender many doge phrases into the dogefied element, randomly positioned.\r\n\\***You can only use this method if you set the value for 'barkInterval' to at least 1.**\r\n\r\n> ```javascript\r\n> doge.manyBark();\r\n> ```\r\n\r\n#### 4. set(prop, val)\r\nUsed to set properties. Can be used to any doge option.  \r\n**This method overrides the selected option values with the new values.**  \r\nUsage:\r\n\r\n> ```javascript\r\n> doge.set('barkOn', ['keydown', 'click']);\r\n> ```\r\n\r\nThis method return the doge, updated.\r\n\r\n#### 5. put(prop, val)\r\nUsed to append values to properties. Can be used **only on list options**.  \r\nThis method **don't overrides the selected option values**. Only append more values to it.  \r\nUsage:\r\n\r\n> ```javascript\r\n> doge.put('colors', '#ffffff');\r\n> ```\r\n\r\nor:\r\n\r\n> ```javascript\r\n> doge.put('colors', ['#ff0000', 'yellowgreen', 'deeppink']);\r\n> ```\r\n\r\nThis method return the doge, updated.\r\n\r\n#### 6. clearBarks()\r\nRemoves many barks from dogefied element. **Not all of then!**\r\n\r\n> ```javascript\r\n> doge.clearBarks();\r\n> ```\r\n\r\n#### 7. defaults()\r\nReset the doge options to default values. Make it showns as a new doge.\r\n\r\n> ```javascript\r\n> doge.defaults();\r\n> ```\r\n\r\nThis method return the doge, resetted.\r\n\r\n\r\n## Examples\r\nDogefy was built to be personalized.  \r\nYou can just make adjusts in default options, or make your very own doge.  \r\nUsing provided methods, you can change the way your doge act in runtime!\r\n\r\n##### A common doge\r\nA simple use of dogefy sets one button or other element to make it bark, for example.  \r\nThe defaults of dogefy already have many words and colors for barks.  \r\nA very simple doge is like this:\r\n\r\n> ```javascript\r\n>  var doge = document.getElementById('doge').dogefy({\r\n> \t \tbarkFrom: document.getElementById('btn'),\r\n> \t\tclearFrom: document.getElementById('btn3')\r\n>  });\r\n>```\r\n\r\nThis will create a doge with manners to bark and clear barks.  \r\nThe barks will hide in 10 seconds as default.\r\n\r\n##### A **very** personalized doge\r\nAnother use of dogefy sets many, many things.  \r\nYou  can personalize almost everything in a doge.  \r\nLike this:\r\n\r\n> ```javascript\r\n>  var doge = document.getElementById('doge').dogefy({\r\n> \t\tbarkOn: ['click', 'mouseover'],\r\n> \t\tbarkDelay: 50,\r\n> \t\tbarkInterval: 500,\r\n> \t\tbarkDuration: -1,\r\n> \t\tbarkFrom: document.getElementById('btn'),\r\n> \t\tclearWhen: function(callBack) {\r\n> \t\t\tvar btn = document.getElementById('btn3');\r\n> \t\t\tbtn.addEventListener('click', function() {\r\n> \t\t\t\tcallBack();\r\n> \t\t\t});\r\n> \t\t},\r\n> \t\tmanyBarkWhen: function(callBack) {\r\n> \t\t\tvar alot = document.getElementById('btn2');\r\n> \t\t\talot.addEventListener('click', function() {\r\n> \t\t\t\tif (alot.innerHTML === 'Bark a lot!') {\r\n> \t\t\t\t\talot.innerHTML = 'Stop barking!';\r\n> \t\t\t\t\talot.style.backgroundColor = 'red';\r\n> \t\t\t\t} else {\r\n> \t\t\t\t\talot.innerHTML = 'Bark a lot!';\r\n> \t\t\t\t\talot.style.backgroundColor = 'green';\r\n> \t\t\t\t}\r\n> \t\t\t\tcallBack();\r\n> \t\t\t});\r\n> \t\t},\r\n> \t\tfullWords: ['none', 'nope'],\r\n> \t\tfirstWords: ['very', 'not', 'go'],\r\n> \t\tlastWords: ['common', 'dogefy', 'bark'],\r\n> \t\tcolors: ['red', 'yellow', 'blue', 'green', 'black', '#ffcc00'],\r\n> \t\tclearOn: ['load', 'mouseout']\r\n>  });\r\n>```\r\n\r\nThis will create a doge with many boundaries and speaking very different words, with different colors and things.\r\n\r\n##### Runtime things\r\nIf you don't set all things, you can set it after, like:\r\n\r\n> ```javascript\r\n> doge.put('colors', '#ffffff')\r\n> \t\t.set('fullWords', ['oh my doge'])\r\n> \t\t\t\t.set('barkDelay', 100);\r\n> ```\r\n\r\nor reset the doge:\r\n\r\n> ```javascript\r\n> doge.defaults();\r\n> ```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}